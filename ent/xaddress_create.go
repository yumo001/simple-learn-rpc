// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yumo001/simple-learn-rpc/ent/xaddress"
)

// XAddressCreate is the builder for creating a XAddress entity.
type XAddressCreate struct {
	config
	mutation *XAddressMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (xc *XAddressCreate) SetCreatedAt(t time.Time) *XAddressCreate {
	xc.mutation.SetCreatedAt(t)
	return xc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (xc *XAddressCreate) SetNillableCreatedAt(t *time.Time) *XAddressCreate {
	if t != nil {
		xc.SetCreatedAt(*t)
	}
	return xc
}

// SetUpdatedAt sets the "updated_at" field.
func (xc *XAddressCreate) SetUpdatedAt(t time.Time) *XAddressCreate {
	xc.mutation.SetUpdatedAt(t)
	return xc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (xc *XAddressCreate) SetNillableUpdatedAt(t *time.Time) *XAddressCreate {
	if t != nil {
		xc.SetUpdatedAt(*t)
	}
	return xc
}

// SetUserID sets the "user_id" field.
func (xc *XAddressCreate) SetUserID(i int64) *XAddressCreate {
	xc.mutation.SetUserID(i)
	return xc
}

// SetDefault sets the "default" field.
func (xc *XAddressCreate) SetDefault(i int64) *XAddressCreate {
	xc.mutation.SetDefault(i)
	return xc
}

// SetFirstName sets the "first_name" field.
func (xc *XAddressCreate) SetFirstName(s string) *XAddressCreate {
	xc.mutation.SetFirstName(s)
	return xc
}

// SetLastName sets the "last_name" field.
func (xc *XAddressCreate) SetLastName(s string) *XAddressCreate {
	xc.mutation.SetLastName(s)
	return xc
}

// SetCountryID sets the "country_id" field.
func (xc *XAddressCreate) SetCountryID(i int64) *XAddressCreate {
	xc.mutation.SetCountryID(i)
	return xc
}

// SetStreet sets the "street" field.
func (xc *XAddressCreate) SetStreet(s string) *XAddressCreate {
	xc.mutation.SetStreet(s)
	return xc
}

// SetProvince sets the "province" field.
func (xc *XAddressCreate) SetProvince(s string) *XAddressCreate {
	xc.mutation.SetProvince(s)
	return xc
}

// SetCity sets the "city" field.
func (xc *XAddressCreate) SetCity(s string) *XAddressCreate {
	xc.mutation.SetCity(s)
	return xc
}

// SetPostalCode sets the "postal_code" field.
func (xc *XAddressCreate) SetPostalCode(s string) *XAddressCreate {
	xc.mutation.SetPostalCode(s)
	return xc
}

// SetPhone sets the "phone" field.
func (xc *XAddressCreate) SetPhone(s string) *XAddressCreate {
	xc.mutation.SetPhone(s)
	return xc
}

// SetID sets the "id" field.
func (xc *XAddressCreate) SetID(u uint64) *XAddressCreate {
	xc.mutation.SetID(u)
	return xc
}

// Mutation returns the XAddressMutation object of the builder.
func (xc *XAddressCreate) Mutation() *XAddressMutation {
	return xc.mutation
}

// Save creates the XAddress in the database.
func (xc *XAddressCreate) Save(ctx context.Context) (*XAddress, error) {
	xc.defaults()
	return withHooks(ctx, xc.sqlSave, xc.mutation, xc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (xc *XAddressCreate) SaveX(ctx context.Context) *XAddress {
	v, err := xc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xc *XAddressCreate) Exec(ctx context.Context) error {
	_, err := xc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xc *XAddressCreate) ExecX(ctx context.Context) {
	if err := xc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xc *XAddressCreate) defaults() {
	if _, ok := xc.mutation.CreatedAt(); !ok {
		v := xaddress.DefaultCreatedAt()
		xc.mutation.SetCreatedAt(v)
	}
	if _, ok := xc.mutation.UpdatedAt(); !ok {
		v := xaddress.DefaultUpdatedAt()
		xc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xc *XAddressCreate) check() error {
	if _, ok := xc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "XAddress.created_at"`)}
	}
	if _, ok := xc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "XAddress.updated_at"`)}
	}
	if _, ok := xc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "XAddress.user_id"`)}
	}
	if _, ok := xc.mutation.Default(); !ok {
		return &ValidationError{Name: "default", err: errors.New(`ent: missing required field "XAddress.default"`)}
	}
	if _, ok := xc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "XAddress.first_name"`)}
	}
	if _, ok := xc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "XAddress.last_name"`)}
	}
	if _, ok := xc.mutation.CountryID(); !ok {
		return &ValidationError{Name: "country_id", err: errors.New(`ent: missing required field "XAddress.country_id"`)}
	}
	if _, ok := xc.mutation.Street(); !ok {
		return &ValidationError{Name: "street", err: errors.New(`ent: missing required field "XAddress.street"`)}
	}
	if _, ok := xc.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`ent: missing required field "XAddress.province"`)}
	}
	if _, ok := xc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "XAddress.city"`)}
	}
	if _, ok := xc.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "XAddress.postal_code"`)}
	}
	if _, ok := xc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "XAddress.phone"`)}
	}
	return nil
}

func (xc *XAddressCreate) sqlSave(ctx context.Context) (*XAddress, error) {
	if err := xc.check(); err != nil {
		return nil, err
	}
	_node, _spec := xc.createSpec()
	if err := sqlgraph.CreateNode(ctx, xc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	xc.mutation.id = &_node.ID
	xc.mutation.done = true
	return _node, nil
}

func (xc *XAddressCreate) createSpec() (*XAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &XAddress{config: xc.config}
		_spec = sqlgraph.NewCreateSpec(xaddress.Table, sqlgraph.NewFieldSpec(xaddress.FieldID, field.TypeUint64))
	)
	if id, ok := xc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := xc.mutation.CreatedAt(); ok {
		_spec.SetField(xaddress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := xc.mutation.UpdatedAt(); ok {
		_spec.SetField(xaddress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := xc.mutation.UserID(); ok {
		_spec.SetField(xaddress.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := xc.mutation.Default(); ok {
		_spec.SetField(xaddress.FieldDefault, field.TypeInt64, value)
		_node.Default = value
	}
	if value, ok := xc.mutation.FirstName(); ok {
		_spec.SetField(xaddress.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := xc.mutation.LastName(); ok {
		_spec.SetField(xaddress.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := xc.mutation.CountryID(); ok {
		_spec.SetField(xaddress.FieldCountryID, field.TypeInt64, value)
		_node.CountryID = value
	}
	if value, ok := xc.mutation.Street(); ok {
		_spec.SetField(xaddress.FieldStreet, field.TypeString, value)
		_node.Street = value
	}
	if value, ok := xc.mutation.Province(); ok {
		_spec.SetField(xaddress.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := xc.mutation.City(); ok {
		_spec.SetField(xaddress.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := xc.mutation.PostalCode(); ok {
		_spec.SetField(xaddress.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := xc.mutation.Phone(); ok {
		_spec.SetField(xaddress.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	return _node, _spec
}

// XAddressCreateBulk is the builder for creating many XAddress entities in bulk.
type XAddressCreateBulk struct {
	config
	err      error
	builders []*XAddressCreate
}

// Save creates the XAddress entities in the database.
func (xcb *XAddressCreateBulk) Save(ctx context.Context) ([]*XAddress, error) {
	if xcb.err != nil {
		return nil, xcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(xcb.builders))
	nodes := make([]*XAddress, len(xcb.builders))
	mutators := make([]Mutator, len(xcb.builders))
	for i := range xcb.builders {
		func(i int, root context.Context) {
			builder := xcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*XAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, xcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, xcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, xcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (xcb *XAddressCreateBulk) SaveX(ctx context.Context) []*XAddress {
	v, err := xcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xcb *XAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := xcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xcb *XAddressCreateBulk) ExecX(ctx context.Context) {
	if err := xcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yumo001/simple-learn-rpc/ent/predicate"
	"github.com/yumo001/simple-learn-rpc/ent/xaddress"
)

// XAddressUpdate is the builder for updating XAddress entities.
type XAddressUpdate struct {
	config
	hooks    []Hook
	mutation *XAddressMutation
}

// Where appends a list predicates to the XAddressUpdate builder.
func (xu *XAddressUpdate) Where(ps ...predicate.XAddress) *XAddressUpdate {
	xu.mutation.Where(ps...)
	return xu
}

// SetUpdatedAt sets the "updated_at" field.
func (xu *XAddressUpdate) SetUpdatedAt(t time.Time) *XAddressUpdate {
	xu.mutation.SetUpdatedAt(t)
	return xu
}

// SetUserID sets the "user_id" field.
func (xu *XAddressUpdate) SetUserID(i int64) *XAddressUpdate {
	xu.mutation.ResetUserID()
	xu.mutation.SetUserID(i)
	return xu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillableUserID(i *int64) *XAddressUpdate {
	if i != nil {
		xu.SetUserID(*i)
	}
	return xu
}

// AddUserID adds i to the "user_id" field.
func (xu *XAddressUpdate) AddUserID(i int64) *XAddressUpdate {
	xu.mutation.AddUserID(i)
	return xu
}

// SetDefault sets the "default" field.
func (xu *XAddressUpdate) SetDefault(i int64) *XAddressUpdate {
	xu.mutation.ResetDefault()
	xu.mutation.SetDefault(i)
	return xu
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillableDefault(i *int64) *XAddressUpdate {
	if i != nil {
		xu.SetDefault(*i)
	}
	return xu
}

// AddDefault adds i to the "default" field.
func (xu *XAddressUpdate) AddDefault(i int64) *XAddressUpdate {
	xu.mutation.AddDefault(i)
	return xu
}

// SetFirstName sets the "first_name" field.
func (xu *XAddressUpdate) SetFirstName(s string) *XAddressUpdate {
	xu.mutation.SetFirstName(s)
	return xu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillableFirstName(s *string) *XAddressUpdate {
	if s != nil {
		xu.SetFirstName(*s)
	}
	return xu
}

// SetLastName sets the "last_name" field.
func (xu *XAddressUpdate) SetLastName(s string) *XAddressUpdate {
	xu.mutation.SetLastName(s)
	return xu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillableLastName(s *string) *XAddressUpdate {
	if s != nil {
		xu.SetLastName(*s)
	}
	return xu
}

// SetCountryID sets the "country_id" field.
func (xu *XAddressUpdate) SetCountryID(i int64) *XAddressUpdate {
	xu.mutation.ResetCountryID()
	xu.mutation.SetCountryID(i)
	return xu
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillableCountryID(i *int64) *XAddressUpdate {
	if i != nil {
		xu.SetCountryID(*i)
	}
	return xu
}

// AddCountryID adds i to the "country_id" field.
func (xu *XAddressUpdate) AddCountryID(i int64) *XAddressUpdate {
	xu.mutation.AddCountryID(i)
	return xu
}

// SetStreet sets the "street" field.
func (xu *XAddressUpdate) SetStreet(s string) *XAddressUpdate {
	xu.mutation.SetStreet(s)
	return xu
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillableStreet(s *string) *XAddressUpdate {
	if s != nil {
		xu.SetStreet(*s)
	}
	return xu
}

// SetProvince sets the "province" field.
func (xu *XAddressUpdate) SetProvince(s string) *XAddressUpdate {
	xu.mutation.SetProvince(s)
	return xu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillableProvince(s *string) *XAddressUpdate {
	if s != nil {
		xu.SetProvince(*s)
	}
	return xu
}

// SetCity sets the "city" field.
func (xu *XAddressUpdate) SetCity(s string) *XAddressUpdate {
	xu.mutation.SetCity(s)
	return xu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillableCity(s *string) *XAddressUpdate {
	if s != nil {
		xu.SetCity(*s)
	}
	return xu
}

// SetPostalCode sets the "postal_code" field.
func (xu *XAddressUpdate) SetPostalCode(s string) *XAddressUpdate {
	xu.mutation.SetPostalCode(s)
	return xu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillablePostalCode(s *string) *XAddressUpdate {
	if s != nil {
		xu.SetPostalCode(*s)
	}
	return xu
}

// SetPhone sets the "phone" field.
func (xu *XAddressUpdate) SetPhone(s string) *XAddressUpdate {
	xu.mutation.SetPhone(s)
	return xu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (xu *XAddressUpdate) SetNillablePhone(s *string) *XAddressUpdate {
	if s != nil {
		xu.SetPhone(*s)
	}
	return xu
}

// Mutation returns the XAddressMutation object of the builder.
func (xu *XAddressUpdate) Mutation() *XAddressMutation {
	return xu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (xu *XAddressUpdate) Save(ctx context.Context) (int, error) {
	xu.defaults()
	return withHooks(ctx, xu.sqlSave, xu.mutation, xu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (xu *XAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := xu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (xu *XAddressUpdate) Exec(ctx context.Context) error {
	_, err := xu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xu *XAddressUpdate) ExecX(ctx context.Context) {
	if err := xu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xu *XAddressUpdate) defaults() {
	if _, ok := xu.mutation.UpdatedAt(); !ok {
		v := xaddress.UpdateDefaultUpdatedAt()
		xu.mutation.SetUpdatedAt(v)
	}
}

func (xu *XAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(xaddress.Table, xaddress.Columns, sqlgraph.NewFieldSpec(xaddress.FieldID, field.TypeUint64))
	if ps := xu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xu.mutation.UpdatedAt(); ok {
		_spec.SetField(xaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := xu.mutation.UserID(); ok {
		_spec.SetField(xaddress.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := xu.mutation.AddedUserID(); ok {
		_spec.AddField(xaddress.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := xu.mutation.Default(); ok {
		_spec.SetField(xaddress.FieldDefault, field.TypeInt64, value)
	}
	if value, ok := xu.mutation.AddedDefault(); ok {
		_spec.AddField(xaddress.FieldDefault, field.TypeInt64, value)
	}
	if value, ok := xu.mutation.FirstName(); ok {
		_spec.SetField(xaddress.FieldFirstName, field.TypeString, value)
	}
	if value, ok := xu.mutation.LastName(); ok {
		_spec.SetField(xaddress.FieldLastName, field.TypeString, value)
	}
	if value, ok := xu.mutation.CountryID(); ok {
		_spec.SetField(xaddress.FieldCountryID, field.TypeInt64, value)
	}
	if value, ok := xu.mutation.AddedCountryID(); ok {
		_spec.AddField(xaddress.FieldCountryID, field.TypeInt64, value)
	}
	if value, ok := xu.mutation.Street(); ok {
		_spec.SetField(xaddress.FieldStreet, field.TypeString, value)
	}
	if value, ok := xu.mutation.Province(); ok {
		_spec.SetField(xaddress.FieldProvince, field.TypeString, value)
	}
	if value, ok := xu.mutation.City(); ok {
		_spec.SetField(xaddress.FieldCity, field.TypeString, value)
	}
	if value, ok := xu.mutation.PostalCode(); ok {
		_spec.SetField(xaddress.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := xu.mutation.Phone(); ok {
		_spec.SetField(xaddress.FieldPhone, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, xu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	xu.mutation.done = true
	return n, nil
}

// XAddressUpdateOne is the builder for updating a single XAddress entity.
type XAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *XAddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (xuo *XAddressUpdateOne) SetUpdatedAt(t time.Time) *XAddressUpdateOne {
	xuo.mutation.SetUpdatedAt(t)
	return xuo
}

// SetUserID sets the "user_id" field.
func (xuo *XAddressUpdateOne) SetUserID(i int64) *XAddressUpdateOne {
	xuo.mutation.ResetUserID()
	xuo.mutation.SetUserID(i)
	return xuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillableUserID(i *int64) *XAddressUpdateOne {
	if i != nil {
		xuo.SetUserID(*i)
	}
	return xuo
}

// AddUserID adds i to the "user_id" field.
func (xuo *XAddressUpdateOne) AddUserID(i int64) *XAddressUpdateOne {
	xuo.mutation.AddUserID(i)
	return xuo
}

// SetDefault sets the "default" field.
func (xuo *XAddressUpdateOne) SetDefault(i int64) *XAddressUpdateOne {
	xuo.mutation.ResetDefault()
	xuo.mutation.SetDefault(i)
	return xuo
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillableDefault(i *int64) *XAddressUpdateOne {
	if i != nil {
		xuo.SetDefault(*i)
	}
	return xuo
}

// AddDefault adds i to the "default" field.
func (xuo *XAddressUpdateOne) AddDefault(i int64) *XAddressUpdateOne {
	xuo.mutation.AddDefault(i)
	return xuo
}

// SetFirstName sets the "first_name" field.
func (xuo *XAddressUpdateOne) SetFirstName(s string) *XAddressUpdateOne {
	xuo.mutation.SetFirstName(s)
	return xuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillableFirstName(s *string) *XAddressUpdateOne {
	if s != nil {
		xuo.SetFirstName(*s)
	}
	return xuo
}

// SetLastName sets the "last_name" field.
func (xuo *XAddressUpdateOne) SetLastName(s string) *XAddressUpdateOne {
	xuo.mutation.SetLastName(s)
	return xuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillableLastName(s *string) *XAddressUpdateOne {
	if s != nil {
		xuo.SetLastName(*s)
	}
	return xuo
}

// SetCountryID sets the "country_id" field.
func (xuo *XAddressUpdateOne) SetCountryID(i int64) *XAddressUpdateOne {
	xuo.mutation.ResetCountryID()
	xuo.mutation.SetCountryID(i)
	return xuo
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillableCountryID(i *int64) *XAddressUpdateOne {
	if i != nil {
		xuo.SetCountryID(*i)
	}
	return xuo
}

// AddCountryID adds i to the "country_id" field.
func (xuo *XAddressUpdateOne) AddCountryID(i int64) *XAddressUpdateOne {
	xuo.mutation.AddCountryID(i)
	return xuo
}

// SetStreet sets the "street" field.
func (xuo *XAddressUpdateOne) SetStreet(s string) *XAddressUpdateOne {
	xuo.mutation.SetStreet(s)
	return xuo
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillableStreet(s *string) *XAddressUpdateOne {
	if s != nil {
		xuo.SetStreet(*s)
	}
	return xuo
}

// SetProvince sets the "province" field.
func (xuo *XAddressUpdateOne) SetProvince(s string) *XAddressUpdateOne {
	xuo.mutation.SetProvince(s)
	return xuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillableProvince(s *string) *XAddressUpdateOne {
	if s != nil {
		xuo.SetProvince(*s)
	}
	return xuo
}

// SetCity sets the "city" field.
func (xuo *XAddressUpdateOne) SetCity(s string) *XAddressUpdateOne {
	xuo.mutation.SetCity(s)
	return xuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillableCity(s *string) *XAddressUpdateOne {
	if s != nil {
		xuo.SetCity(*s)
	}
	return xuo
}

// SetPostalCode sets the "postal_code" field.
func (xuo *XAddressUpdateOne) SetPostalCode(s string) *XAddressUpdateOne {
	xuo.mutation.SetPostalCode(s)
	return xuo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillablePostalCode(s *string) *XAddressUpdateOne {
	if s != nil {
		xuo.SetPostalCode(*s)
	}
	return xuo
}

// SetPhone sets the "phone" field.
func (xuo *XAddressUpdateOne) SetPhone(s string) *XAddressUpdateOne {
	xuo.mutation.SetPhone(s)
	return xuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (xuo *XAddressUpdateOne) SetNillablePhone(s *string) *XAddressUpdateOne {
	if s != nil {
		xuo.SetPhone(*s)
	}
	return xuo
}

// Mutation returns the XAddressMutation object of the builder.
func (xuo *XAddressUpdateOne) Mutation() *XAddressMutation {
	return xuo.mutation
}

// Where appends a list predicates to the XAddressUpdate builder.
func (xuo *XAddressUpdateOne) Where(ps ...predicate.XAddress) *XAddressUpdateOne {
	xuo.mutation.Where(ps...)
	return xuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (xuo *XAddressUpdateOne) Select(field string, fields ...string) *XAddressUpdateOne {
	xuo.fields = append([]string{field}, fields...)
	return xuo
}

// Save executes the query and returns the updated XAddress entity.
func (xuo *XAddressUpdateOne) Save(ctx context.Context) (*XAddress, error) {
	xuo.defaults()
	return withHooks(ctx, xuo.sqlSave, xuo.mutation, xuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (xuo *XAddressUpdateOne) SaveX(ctx context.Context) *XAddress {
	node, err := xuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (xuo *XAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := xuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xuo *XAddressUpdateOne) ExecX(ctx context.Context) {
	if err := xuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xuo *XAddressUpdateOne) defaults() {
	if _, ok := xuo.mutation.UpdatedAt(); !ok {
		v := xaddress.UpdateDefaultUpdatedAt()
		xuo.mutation.SetUpdatedAt(v)
	}
}

func (xuo *XAddressUpdateOne) sqlSave(ctx context.Context) (_node *XAddress, err error) {
	_spec := sqlgraph.NewUpdateSpec(xaddress.Table, xaddress.Columns, sqlgraph.NewFieldSpec(xaddress.FieldID, field.TypeUint64))
	id, ok := xuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "XAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := xuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, xaddress.FieldID)
		for _, f := range fields {
			if !xaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != xaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := xuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xuo.mutation.UpdatedAt(); ok {
		_spec.SetField(xaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := xuo.mutation.UserID(); ok {
		_spec.SetField(xaddress.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := xuo.mutation.AddedUserID(); ok {
		_spec.AddField(xaddress.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := xuo.mutation.Default(); ok {
		_spec.SetField(xaddress.FieldDefault, field.TypeInt64, value)
	}
	if value, ok := xuo.mutation.AddedDefault(); ok {
		_spec.AddField(xaddress.FieldDefault, field.TypeInt64, value)
	}
	if value, ok := xuo.mutation.FirstName(); ok {
		_spec.SetField(xaddress.FieldFirstName, field.TypeString, value)
	}
	if value, ok := xuo.mutation.LastName(); ok {
		_spec.SetField(xaddress.FieldLastName, field.TypeString, value)
	}
	if value, ok := xuo.mutation.CountryID(); ok {
		_spec.SetField(xaddress.FieldCountryID, field.TypeInt64, value)
	}
	if value, ok := xuo.mutation.AddedCountryID(); ok {
		_spec.AddField(xaddress.FieldCountryID, field.TypeInt64, value)
	}
	if value, ok := xuo.mutation.Street(); ok {
		_spec.SetField(xaddress.FieldStreet, field.TypeString, value)
	}
	if value, ok := xuo.mutation.Province(); ok {
		_spec.SetField(xaddress.FieldProvince, field.TypeString, value)
	}
	if value, ok := xuo.mutation.City(); ok {
		_spec.SetField(xaddress.FieldCity, field.TypeString, value)
	}
	if value, ok := xuo.mutation.PostalCode(); ok {
		_spec.SetField(xaddress.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := xuo.mutation.Phone(); ok {
		_spec.SetField(xaddress.FieldPhone, field.TypeString, value)
	}
	_node = &XAddress{config: xuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, xuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	xuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yumo001/simple-learn-rpc/ent/predicate"
	"github.com/yumo001/simple-learn-rpc/ent/xaddress"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeXAddress = "XAddress"
)

// XAddressMutation represents an operation that mutates the XAddress nodes in the graph.
type XAddressMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	user_id       *int64
	adduser_id    *int64
	_default      *int64
	add_default   *int64
	first_name    *string
	last_name     *string
	country_id    *int64
	addcountry_id *int64
	street        *string
	province      *string
	city          *string
	postal_code   *string
	phone         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*XAddress, error)
	predicates    []predicate.XAddress
}

var _ ent.Mutation = (*XAddressMutation)(nil)

// xaddressOption allows management of the mutation configuration using functional options.
type xaddressOption func(*XAddressMutation)

// newXAddressMutation creates new mutation for the XAddress entity.
func newXAddressMutation(c config, op Op, opts ...xaddressOption) *XAddressMutation {
	m := &XAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeXAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withXAddressID sets the ID field of the mutation.
func withXAddressID(id uint64) xaddressOption {
	return func(m *XAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *XAddress
		)
		m.oldValue = func(ctx context.Context) (*XAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().XAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withXAddress sets the old XAddress of the mutation.
func withXAddress(node *XAddress) xaddressOption {
	return func(m *XAddressMutation) {
		m.oldValue = func(context.Context) (*XAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m XAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m XAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of XAddress entities.
func (m *XAddressMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *XAddressMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *XAddressMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().XAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *XAddressMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *XAddressMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *XAddressMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *XAddressMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *XAddressMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *XAddressMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *XAddressMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *XAddressMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *XAddressMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *XAddressMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *XAddressMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetDefault sets the "default" field.
func (m *XAddressMutation) SetDefault(i int64) {
	m._default = &i
	m.add_default = nil
}

// Default returns the value of the "default" field in the mutation.
func (m *XAddressMutation) Default() (r int64, exists bool) {
	v := m._default
	if v == nil {
		return
	}
	return *v, true
}

// OldDefault returns the old "default" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldDefault(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefault: %w", err)
	}
	return oldValue.Default, nil
}

// AddDefault adds i to the "default" field.
func (m *XAddressMutation) AddDefault(i int64) {
	if m.add_default != nil {
		*m.add_default += i
	} else {
		m.add_default = &i
	}
}

// AddedDefault returns the value that was added to the "default" field in this mutation.
func (m *XAddressMutation) AddedDefault() (r int64, exists bool) {
	v := m.add_default
	if v == nil {
		return
	}
	return *v, true
}

// ResetDefault resets all changes to the "default" field.
func (m *XAddressMutation) ResetDefault() {
	m._default = nil
	m.add_default = nil
}

// SetFirstName sets the "first_name" field.
func (m *XAddressMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *XAddressMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *XAddressMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *XAddressMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *XAddressMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *XAddressMutation) ResetLastName() {
	m.last_name = nil
}

// SetCountryID sets the "country_id" field.
func (m *XAddressMutation) SetCountryID(i int64) {
	m.country_id = &i
	m.addcountry_id = nil
}

// CountryID returns the value of the "country_id" field in the mutation.
func (m *XAddressMutation) CountryID() (r int64, exists bool) {
	v := m.country_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCountryID returns the old "country_id" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldCountryID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountryID: %w", err)
	}
	return oldValue.CountryID, nil
}

// AddCountryID adds i to the "country_id" field.
func (m *XAddressMutation) AddCountryID(i int64) {
	if m.addcountry_id != nil {
		*m.addcountry_id += i
	} else {
		m.addcountry_id = &i
	}
}

// AddedCountryID returns the value that was added to the "country_id" field in this mutation.
func (m *XAddressMutation) AddedCountryID() (r int64, exists bool) {
	v := m.addcountry_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCountryID resets all changes to the "country_id" field.
func (m *XAddressMutation) ResetCountryID() {
	m.country_id = nil
	m.addcountry_id = nil
}

// SetStreet sets the "street" field.
func (m *XAddressMutation) SetStreet(s string) {
	m.street = &s
}

// Street returns the value of the "street" field in the mutation.
func (m *XAddressMutation) Street() (r string, exists bool) {
	v := m.street
	if v == nil {
		return
	}
	return *v, true
}

// OldStreet returns the old "street" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldStreet(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStreet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStreet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreet: %w", err)
	}
	return oldValue.Street, nil
}

// ResetStreet resets all changes to the "street" field.
func (m *XAddressMutation) ResetStreet() {
	m.street = nil
}

// SetProvince sets the "province" field.
func (m *XAddressMutation) SetProvince(s string) {
	m.province = &s
}

// Province returns the value of the "province" field in the mutation.
func (m *XAddressMutation) Province() (r string, exists bool) {
	v := m.province
	if v == nil {
		return
	}
	return *v, true
}

// OldProvince returns the old "province" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldProvince(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvince is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvince requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvince: %w", err)
	}
	return oldValue.Province, nil
}

// ResetProvince resets all changes to the "province" field.
func (m *XAddressMutation) ResetProvince() {
	m.province = nil
}

// SetCity sets the "city" field.
func (m *XAddressMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *XAddressMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *XAddressMutation) ResetCity() {
	m.city = nil
}

// SetPostalCode sets the "postal_code" field.
func (m *XAddressMutation) SetPostalCode(s string) {
	m.postal_code = &s
}

// PostalCode returns the value of the "postal_code" field in the mutation.
func (m *XAddressMutation) PostalCode() (r string, exists bool) {
	v := m.postal_code
	if v == nil {
		return
	}
	return *v, true
}

// OldPostalCode returns the old "postal_code" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldPostalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostalCode: %w", err)
	}
	return oldValue.PostalCode, nil
}

// ResetPostalCode resets all changes to the "postal_code" field.
func (m *XAddressMutation) ResetPostalCode() {
	m.postal_code = nil
}

// SetPhone sets the "phone" field.
func (m *XAddressMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *XAddressMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the XAddress entity.
// If the XAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XAddressMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *XAddressMutation) ResetPhone() {
	m.phone = nil
}

// Where appends a list predicates to the XAddressMutation builder.
func (m *XAddressMutation) Where(ps ...predicate.XAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the XAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *XAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.XAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *XAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *XAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (XAddress).
func (m *XAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *XAddressMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, xaddress.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, xaddress.FieldUpdatedAt)
	}
	if m.user_id != nil {
		fields = append(fields, xaddress.FieldUserID)
	}
	if m._default != nil {
		fields = append(fields, xaddress.FieldDefault)
	}
	if m.first_name != nil {
		fields = append(fields, xaddress.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, xaddress.FieldLastName)
	}
	if m.country_id != nil {
		fields = append(fields, xaddress.FieldCountryID)
	}
	if m.street != nil {
		fields = append(fields, xaddress.FieldStreet)
	}
	if m.province != nil {
		fields = append(fields, xaddress.FieldProvince)
	}
	if m.city != nil {
		fields = append(fields, xaddress.FieldCity)
	}
	if m.postal_code != nil {
		fields = append(fields, xaddress.FieldPostalCode)
	}
	if m.phone != nil {
		fields = append(fields, xaddress.FieldPhone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *XAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case xaddress.FieldCreatedAt:
		return m.CreatedAt()
	case xaddress.FieldUpdatedAt:
		return m.UpdatedAt()
	case xaddress.FieldUserID:
		return m.UserID()
	case xaddress.FieldDefault:
		return m.Default()
	case xaddress.FieldFirstName:
		return m.FirstName()
	case xaddress.FieldLastName:
		return m.LastName()
	case xaddress.FieldCountryID:
		return m.CountryID()
	case xaddress.FieldStreet:
		return m.Street()
	case xaddress.FieldProvince:
		return m.Province()
	case xaddress.FieldCity:
		return m.City()
	case xaddress.FieldPostalCode:
		return m.PostalCode()
	case xaddress.FieldPhone:
		return m.Phone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *XAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case xaddress.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case xaddress.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case xaddress.FieldUserID:
		return m.OldUserID(ctx)
	case xaddress.FieldDefault:
		return m.OldDefault(ctx)
	case xaddress.FieldFirstName:
		return m.OldFirstName(ctx)
	case xaddress.FieldLastName:
		return m.OldLastName(ctx)
	case xaddress.FieldCountryID:
		return m.OldCountryID(ctx)
	case xaddress.FieldStreet:
		return m.OldStreet(ctx)
	case xaddress.FieldProvince:
		return m.OldProvince(ctx)
	case xaddress.FieldCity:
		return m.OldCity(ctx)
	case xaddress.FieldPostalCode:
		return m.OldPostalCode(ctx)
	case xaddress.FieldPhone:
		return m.OldPhone(ctx)
	}
	return nil, fmt.Errorf("unknown XAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case xaddress.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case xaddress.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case xaddress.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case xaddress.FieldDefault:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefault(v)
		return nil
	case xaddress.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case xaddress.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case xaddress.FieldCountryID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountryID(v)
		return nil
	case xaddress.FieldStreet:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreet(v)
		return nil
	case xaddress.FieldProvince:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvince(v)
		return nil
	case xaddress.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case xaddress.FieldPostalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostalCode(v)
		return nil
	case xaddress.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	}
	return fmt.Errorf("unknown XAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *XAddressMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, xaddress.FieldUserID)
	}
	if m.add_default != nil {
		fields = append(fields, xaddress.FieldDefault)
	}
	if m.addcountry_id != nil {
		fields = append(fields, xaddress.FieldCountryID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *XAddressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case xaddress.FieldUserID:
		return m.AddedUserID()
	case xaddress.FieldDefault:
		return m.AddedDefault()
	case xaddress.FieldCountryID:
		return m.AddedCountryID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	case xaddress.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case xaddress.FieldDefault:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDefault(v)
		return nil
	case xaddress.FieldCountryID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCountryID(v)
		return nil
	}
	return fmt.Errorf("unknown XAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *XAddressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *XAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *XAddressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown XAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *XAddressMutation) ResetField(name string) error {
	switch name {
	case xaddress.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case xaddress.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case xaddress.FieldUserID:
		m.ResetUserID()
		return nil
	case xaddress.FieldDefault:
		m.ResetDefault()
		return nil
	case xaddress.FieldFirstName:
		m.ResetFirstName()
		return nil
	case xaddress.FieldLastName:
		m.ResetLastName()
		return nil
	case xaddress.FieldCountryID:
		m.ResetCountryID()
		return nil
	case xaddress.FieldStreet:
		m.ResetStreet()
		return nil
	case xaddress.FieldProvince:
		m.ResetProvince()
		return nil
	case xaddress.FieldCity:
		m.ResetCity()
		return nil
	case xaddress.FieldPostalCode:
		m.ResetPostalCode()
		return nil
	case xaddress.FieldPhone:
		m.ResetPhone()
		return nil
	}
	return fmt.Errorf("unknown XAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *XAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *XAddressMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *XAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *XAddressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *XAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *XAddressMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *XAddressMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown XAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *XAddressMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown XAddress edge %s", name)
}

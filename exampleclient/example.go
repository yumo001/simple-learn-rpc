// Code generated by goctl. DO NOT EDIT.
// Source: example.proto

package exampleclient

import (
	"context"

	"github.com/yumo001/simple-learn-rpc/types/example"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDInt32Resp  = example.BaseIDInt32Resp
	BaseIDInt64Resp  = example.BaseIDInt64Resp
	BaseIDResp       = example.BaseIDResp
	BaseIDStringResp = example.BaseIDStringResp
	BaseIDUint32Resp = example.BaseIDUint32Resp
	BaseResp         = example.BaseResp
	BaseUUIDResp     = example.BaseUUIDResp
	Empty            = example.Empty
	IDInt32Req       = example.IDInt32Req
	IDInt64Req       = example.IDInt64Req
	IDReq            = example.IDReq
	IDStringReq      = example.IDStringReq
	IDUint32Req      = example.IDUint32Req
	IDsInt32Req      = example.IDsInt32Req
	IDsInt64Req      = example.IDsInt64Req
	IDsReq           = example.IDsReq
	IDsStringReq     = example.IDsStringReq
	IDsUint32Req     = example.IDsUint32Req
	PageInfoReq      = example.PageInfoReq
	UUIDReq          = example.UUIDReq
	UUIDsReq         = example.UUIDsReq
	XAddressInfo     = example.XAddressInfo
	XAddressListReq  = example.XAddressListReq
	XAddressListResp = example.XAddressListResp

	Example interface {
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		// XAddress management
		CreateXAddress(ctx context.Context, in *XAddressInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateXAddress(ctx context.Context, in *XAddressInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetXAddressList(ctx context.Context, in *XAddressListReq, opts ...grpc.CallOption) (*XAddressListResp, error)
		GetXAddressById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*XAddressInfo, error)
		DeleteXAddress(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultExample struct {
		cli zrpc.Client
	}
)

func NewExample(cli zrpc.Client) Example {
	return &defaultExample{
		cli: cli,
	}
}

func (m *defaultExample) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := example.NewExampleClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

// XAddress management
func (m *defaultExample) CreateXAddress(ctx context.Context, in *XAddressInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := example.NewExampleClient(m.cli.Conn())
	return client.CreateXAddress(ctx, in, opts...)
}

func (m *defaultExample) UpdateXAddress(ctx context.Context, in *XAddressInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := example.NewExampleClient(m.cli.Conn())
	return client.UpdateXAddress(ctx, in, opts...)
}

func (m *defaultExample) GetXAddressList(ctx context.Context, in *XAddressListReq, opts ...grpc.CallOption) (*XAddressListResp, error) {
	client := example.NewExampleClient(m.cli.Conn())
	return client.GetXAddressList(ctx, in, opts...)
}

func (m *defaultExample) GetXAddressById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*XAddressInfo, error) {
	client := example.NewExampleClient(m.cli.Conn())
	return client.GetXAddressById(ctx, in, opts...)
}

func (m *defaultExample) DeleteXAddress(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := example.NewExampleClient(m.cli.Conn())
	return client.DeleteXAddress(ctx, in, opts...)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: example.proto

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Example_InitDatabase_FullMethodName    = "/example.Example/initDatabase"
	Example_CreateXAddress_FullMethodName  = "/example.Example/createXAddress"
	Example_UpdateXAddress_FullMethodName  = "/example.Example/updateXAddress"
	Example_GetXAddressList_FullMethodName = "/example.Example/getXAddressList"
	Example_GetXAddressById_FullMethodName = "/example.Example/getXAddressById"
	Example_DeleteXAddress_FullMethodName  = "/example.Example/deleteXAddress"
)

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// XAddress management
	// group: XAddress
	CreateXAddress(ctx context.Context, in *XAddressInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: XAddress
	UpdateXAddress(ctx context.Context, in *XAddressInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: XAddress
	GetXAddressList(ctx context.Context, in *XAddressListReq, opts ...grpc.CallOption) (*XAddressListResp, error)
	// group: XAddress
	GetXAddressById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*XAddressInfo, error)
	// group: XAddress
	DeleteXAddress(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type exampleClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleClient(cc grpc.ClientConnInterface) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Example_InitDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) CreateXAddress(ctx context.Context, in *XAddressInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Example_CreateXAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UpdateXAddress(ctx context.Context, in *XAddressInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Example_UpdateXAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) GetXAddressList(ctx context.Context, in *XAddressListReq, opts ...grpc.CallOption) (*XAddressListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XAddressListResp)
	err := c.cc.Invoke(ctx, Example_GetXAddressList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) GetXAddressById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*XAddressInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XAddressInfo)
	err := c.cc.Invoke(ctx, Example_GetXAddressById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) DeleteXAddress(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Example_DeleteXAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleServer is the server API for Example service.
// All implementations must embed UnimplementedExampleServer
// for forward compatibility.
type ExampleServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// XAddress management
	// group: XAddress
	CreateXAddress(context.Context, *XAddressInfo) (*BaseIDResp, error)
	// group: XAddress
	UpdateXAddress(context.Context, *XAddressInfo) (*BaseResp, error)
	// group: XAddress
	GetXAddressList(context.Context, *XAddressListReq) (*XAddressListResp, error)
	// group: XAddress
	GetXAddressById(context.Context, *IDReq) (*XAddressInfo, error)
	// group: XAddress
	DeleteXAddress(context.Context, *IDsReq) (*BaseResp, error)
	mustEmbedUnimplementedExampleServer()
}

// UnimplementedExampleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExampleServer struct{}

func (UnimplementedExampleServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedExampleServer) CreateXAddress(context.Context, *XAddressInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateXAddress not implemented")
}
func (UnimplementedExampleServer) UpdateXAddress(context.Context, *XAddressInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateXAddress not implemented")
}
func (UnimplementedExampleServer) GetXAddressList(context.Context, *XAddressListReq) (*XAddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXAddressList not implemented")
}
func (UnimplementedExampleServer) GetXAddressById(context.Context, *IDReq) (*XAddressInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXAddressById not implemented")
}
func (UnimplementedExampleServer) DeleteXAddress(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteXAddress not implemented")
}
func (UnimplementedExampleServer) mustEmbedUnimplementedExampleServer() {}
func (UnimplementedExampleServer) testEmbeddedByValue()                 {}

// UnsafeExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServer will
// result in compilation errors.
type UnsafeExampleServer interface {
	mustEmbedUnimplementedExampleServer()
}

func RegisterExampleServer(s grpc.ServiceRegistrar, srv ExampleServer) {
	// If the following call pancis, it indicates UnimplementedExampleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Example_ServiceDesc, srv)
}

func _Example_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_CreateXAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XAddressInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).CreateXAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_CreateXAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).CreateXAddress(ctx, req.(*XAddressInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UpdateXAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XAddressInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UpdateXAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_UpdateXAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UpdateXAddress(ctx, req.(*XAddressInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_GetXAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).GetXAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_GetXAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).GetXAddressList(ctx, req.(*XAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_GetXAddressById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).GetXAddressById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_GetXAddressById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).GetXAddressById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_DeleteXAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).DeleteXAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_DeleteXAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).DeleteXAddress(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Example_ServiceDesc is the grpc.ServiceDesc for Example service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Example_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Example_InitDatabase_Handler,
		},
		{
			MethodName: "createXAddress",
			Handler:    _Example_CreateXAddress_Handler,
		},
		{
			MethodName: "updateXAddress",
			Handler:    _Example_UpdateXAddress_Handler,
		},
		{
			MethodName: "getXAddressList",
			Handler:    _Example_GetXAddressList_Handler,
		},
		{
			MethodName: "getXAddressById",
			Handler:    _Example_GetXAddressById_Handler,
		},
		{
			MethodName: "deleteXAddress",
			Handler:    _Example_DeleteXAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
